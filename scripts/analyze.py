#! /usr/bin/env python3

import sys
import os
import shutil
import codecs
import pandas as pd
import numpy as np
import markdown
from tabulate import tabulate

"""
Analyses output CSV generated by QGIS, and generates reports in Markdown and HTML
"""

def dfToMarkdown(dataframe, headers='keys'):
    """Convert Data Frame to Markdown table with optionally custom headers"""
    mdOut = dataframe.pipe(tabulate, headers=headers, tablefmt='pipe')
    return mdOut

def main():
    if len(sys.argv) < 3:
        sys.stderr.write("USAGE: analyze.py <inputFile> <dirOut>\n")
        sys.exit()
    else:
        fileIn=sys.argv[1]
        dirOut=os.path.normpath(sys.argv[2])

    if not os.path.isfile(fileIn):
        sys.stderr.write("Input file does not exist\n")
        sys.exit()

    if not os.path.isdir(dirOut):
        os.makedirs(dirOut)

    # Markdown-formatted string that is used to write report
    mdString = ''
    mdString += '# Analysis report\n'
    mdString += '\nInput file: ' + fileIn + '\n'

    # Read CSV to Data Frame
    domains = pd.read_csv(fileIn, index_col=0, encoding="utf-8")

    # Number of domains records
    noDomains = len(domains)

    # Frequency of provinces
    provinceVCounts = domains['PROV_NAAM'].value_counts().to_frame()

    # Add column with relative frequencies
    provinceRelFrequencies = []
    for i, row in provinceVCounts.iterrows():
        relFrequency = 100*row[0]/noDomains
        provinceRelFrequencies.append(round(relFrequency, 2))

    provinceVCounts.insert(1, '%', provinceRelFrequencies)

    mdString += '\n\n## Provinces\n\n'
    mdString += dfToMarkdown(provinceVCounts,['Province', 'Count', '% of all domains'])

    # Open output report (Markdown format) for writing
    try:
        reportMD = os.path.join(dirOut, 'report.md')
        fOut = codecs.open(reportMD, "w", "utf-8")
    except:
        sys.stderr.write("Cannot write output report\n")
        sys.exit()

    fOut.write(mdString)
    fOut.close()

main()
