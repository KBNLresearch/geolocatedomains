#! /usr/bin/env python3

import sys
import os
import shutil
import codecs
import pandas as pd
import numpy as np
import markdown
from tabulate import tabulate

"""
Analyzes output CSV generated by QGIS, and generates reports in Markdown
"""

def dfToMarkdown(dataframe, headers='keys'):
    """Convert Data Frame to Markdown table with optionally custom headers"""
    mdOut = dataframe.pipe(tabulate, headers=headers, tablefmt='pipe')
    return mdOut

def main():
    if len(sys.argv) < 3:
        sys.stderr.write("USAGE: analyze.py <inputFile> <dirOut>\n")
        sys.exit()
    else:
        fileIn=sys.argv[1]
        dirOut=os.path.normpath(sys.argv[2])

    if not os.path.isfile(fileIn):
        sys.stderr.write("Input file does not exist\n")
        sys.exit()

    if not os.path.isdir(dirOut):
        os.makedirs(dirOut)

    # Markdown-formatted string that is used to write report
    mdString = ''
    mdString += '# Analysis report\n'
    mdString += '\nInput file: ' + fileIn + '\n'

    # Read CSV to Data Frame
    domains = pd.read_csv(fileIn,
                          index_col=0,
                          encoding="utf-8",
                          dtype={'domain': 'str',
                                 'hasValidIP': 'str',
                                 'countryIsoCode': 'str',
                                 'cityName': 'str',
                                 'latitude': 'float',
                                 'longitude': 'float',
                                 'accuracyRadius': 'str',
                                 'PROV_NAAM': 'str'})

    # Replace eny empty values with NaN so we can handle missing data
    domains.replace('', np.nan, inplace=True)

    # Number of domain records
    noDomains = len(domains)

    # Select active domains
    domainsActive = domains[domains['hasValidIP'] == 'True']
    domainsInactive = domains[domains['hasValidIP'] == 'False']
    noDomainsActive = len(domainsActive)
    noDomainsInactive = len(domainsInactive)

    # Report number of active and inactive domains
    mdString += '\nNumber of active domains: ' + str(noDomainsActive) +'\n'
    mdString += '\nNumber of inactive domains: ' + str(noDomainsInactive) +'\n'

    # Countries (calculated from active domains only)
    countryVCounts = domainsActive['countryIsoCode'].value_counts().to_frame()

    # Active domains with no country ID
    domainsActiveNoCountry = domainsActive[domainsActive['countryIsoCode'].isnull()]
    noDomainsActiveNoCountry = len(domainsActiveNoCountry)

    mdString += '\nNumber of active domains with no country ID:' + str(noDomainsActiveNoCountry) + '\n'

    # Add column with relative frequencies
    countryRelFrequencies = []
    for i, row in countryVCounts.iterrows():
        relFrequency = 100*row[0]/noDomainsActive
        countryRelFrequencies.append(round(relFrequency, 2))

    countryVCounts.insert(1, '%', countryRelFrequencies)

    mdString += '\n\n## Countries\n\n'
    mdString += dfToMarkdown(countryVCounts, ['Country', 'Count', '% of all active domains'])

    # Select domains hosted in NL
    domainsNL = domainsActive[domainsActive['countryIsoCode'] == 'NL']
    noDomainsNL = len(domainsNL)

    # Provinces
    provinceVCounts = domainsNL['PROV_NAAM'].value_counts().to_frame()

    # Add column with relative frequencies
    provinceRelFrequencies = []
    for i, row in provinceVCounts.iterrows():
        relFrequency = 100*row[0]/noDomainsNL
        provinceRelFrequencies.append(round(relFrequency, 2))

    provinceVCounts.insert(1, '%', provinceRelFrequencies)

    mdString += '\n\n## Provinces\n\n'
    mdString += dfToMarkdown(provinceVCounts, ['Province', 'Count', '% of all NL-hosted domains'])

    # Export records for domains hosted in Friesland to separate CSV
    domainsFryslan = domainsNL[domainsNL['PROV_NAAM'] == 'Frysl√¢n']
    domainsFryslan.to_csv(os.path.join(dirOut, 'domains-fryslan.csv'), encoding='utf-8')

    # Open output report (Markdown format) for writing
    try:
        reportMD = os.path.join(dirOut, 'report.md')
        fOut = codecs.open(reportMD, "w", "utf-8")
    except:
        sys.stderr.write("Cannot write output report\n")
        sys.exit()

    fOut.write(mdString)
    fOut.close()

main()
